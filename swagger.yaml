openapi: 3.0.0
info:
  version: 1.0.0
  title: Subscribe2Get
  description: Subscription of newspapers and magazines

servers:
  - url: http://localhost:3001/
tags:
  - name: Newspapers
    description: API to manage the newspapers.
  - name: Magazines
    description: API to manage the magazines.
  - name: Users
    description : API to manage registered users

paths:
  /newspapers:
    get:
      summary: Lists all newspapers
      tags: [Newspapers]
      responses:
        "200":
          description: The list of newspapers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newspaper'
    
    post:
      summary: Creates a newspaper
      tags: [Newspapers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Newspaper'
      responses:
        '201':
          description: Created
    delete:
      summary: Deletes all newspapers
      tags: [Newspapers]
      responses:
        '200':
          description: Newspapers are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Newspaper'

  /newspapers/{paperId}:
    get:
      summary: Returns a newspaper by paperId.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Newspaper'
    put:
      summary: Updates a newspaper by paperId
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Newspaper'
      responses:
        '200':
          description: Updated
    delete:
      summary: Deletes a particular newspaper.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted newspaper.

  /newspapers/{paperId}/reviews:
    get:
      summary: Lists all reviews of a newspaper.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
      
      responses:
        "200":
          description: The list of reviews of a newspaper.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        "404":
          description: Newspaper not found.
    
    post:
      summary: Creates a review for a newspaper.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
      responses:
        '201':
          description: Review created!
        '404':
          description: Newspaper not found.  
    delete:
      summary: Deletes all reviews of a newspaper.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
      
      responses:
        '200':
          description: Reviews are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Reviews'
        '404':
          description: Newspaper not found.

  /newspapers/{paperId}/reviews/{reviewId}:
    get:
      summary: Returns a review of a newspaper.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
        - name: reviewId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        '404':
          description: Newspaper or review not found.
    put:
      summary: Updates a review of a newspaper.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type: string
        - name: reviewId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
      responses:
        '200':
          description: Updated review
        '404': 
          description: Newspaper or review not found.
    delete:
      summary: Deletes a particular review of a newspaper.
      tags: [Newspapers]
      parameters:
        - name: paperId
          in: path
          required: true
          description: Autogenerated paperId by MongoDB
          schema:
            type : string
        - name: reviewId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted review of a newspaper.
        '404': 
          description: Newspaper or review not found.

  /magazines:
    get:
      summary: Lists all magazines
      tags: [Magazines]
      responses:
        "200":
          description: The list of magazines.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
    
    post:
      summary: Creates a magazine
      tags: [Magazines]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Magazine'
      responses:
        '201':
          description: Created

    delete:
      summary: Deletes all magazines
      tags: [Magazines]
      responses:
        '200':
          description: Magazines are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Magazine'

  /magazines/{magId}:
    get:
      summary: Returns a magazine by magId.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
    put:
      summary: Updates a magazine by magId
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Magazine'
      responses:
        '200':
          description: Updated
    delete:
      summary: Deletes a particular magazine.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted magazine.

  /magazines/{magId}/reviews:
    get:
      summary: Lists all reviews of a magazine.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
      
      responses:
        "200":
          description: The list of reviews of a magazine.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        "404":
          description: Magazine not found.
    
    post:
      summary: Creates a review for a magazine.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
      responses:
        '201':
          description: Review created!
        '404':
          description: Magazine not found.  
    delete:
      summary: Deletes all reviews of a magazine.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
      
      responses:
        '200':
          description: Reviews are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Reviews'
        '404':
          description: Magazine not found.

  /magazines/{magId}/reviews/{reviewId}:
    get:
      summary: Returns a review of a magazine.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
        - name: reviewId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        '404':
          description: Magazine or review not found.
    put:
      summary: Updates a review of a magazine.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type: string
        - name: reviewId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
      responses:
        '200':
          description: Updated review
        '404': 
          description: Magazine or review not found.
    delete:
      summary: Deletes a particular review of a magazine.
      tags: [Magazines]
      parameters:
        - name: magId
          in: path
          required: true
          description: Autogenerated magId by MongoDB
          schema:
            type : string
        - name: reviewId
          in: path
          required: true
          description: Autogenerated reviewId by MongoDB
          schema:
            type : string
      responses:
        '200':
          description: Deleted review of a magazine.
        '404': 
          description: Magazine or review not found.
  
  /users:
    get : 
      summary: Lists all Users
      tags: [Users]
      responses:
        "200":
          description: The list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    
    post:
      summary: Creates a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User Created
        '404':
          description: Username already exists

    
    delete : 
      summary: Deletes all users
      tags: [Users]
      responses:
        '200':
          description: Users are deleted.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/User'

  /users/{username}:
    get:
      summary: Returns a user by username.
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          description: username created by user
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
    
    put:
      summary: Updates username by given username
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          description: username created by user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated
        '404':
          description: User not found or new username is already existing.

    delete:
      ummary: Deletes a particular user.
      tags: [Users]
      parameters:
        - name: username
          in: path
          required: true
          description: username created by user
          schema:
            type : string
      responses:
        '200':
          description: Deleted user.
        '404':
          description : Username not found

  /users/user/{cred}:
    get:
      summary: Validates user.
      tags: [Users]
      parameters:
        - name: username + password
          in: path
          required: true
          description: username, password created by user
          schema:
            type : string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User credentials not true.
    

components:
  schemas:
    Newspaper:
      type: object
      required:
        - name
        - description
        - image
        - language
        - price
        - featured
        - reviews
      properties:
        id:
          type: integer 
          description: The auto-generated id of the newspaper.
        name:
          type: string
          description: The name of the newspaper.
        description:
          type: string
          description: The details of newpaper.
        image:
          type: string
          description: Url of the image of newspaper.
        language:
          type: string
          description: Language of newspaper.
        price:
          type: number 
          description: The price of newspaper.
        featured:
          type: boolean
          description: flag.
        reviews:
          $ref: "#/components/schemas/Reviews"
          description: All reviews of the newspaper.
        
      example:
        name: Eenadu
        description: Eenadu is the largest circulated Telugu-language daily newspaper of India sold mostly in the states of Andhra Pradesh and Telangana. According to the Indian Readership Survey (IRS) Q2 2019, Eenadu ranks eighth among the most circulated Indian-language dailies with a total readership (TR) of 1,614,105. It was founded by Ramoji Rao in 1974.
        image: assets/images/Eenadu.jpg
        language: Telugu
        price: 195
        featured: true
        reviews: []

    Magazine:
      type: object
      required:
        - name
        - description
        - image
        - language
        - price
        - featured
        - category
        - reviews
      properties:
        id:
          type: integer 
          description: The auto-generated id of the magazine.
        name:
          type: string
          description: The name of the magazine.
        description:
          type: string
          description: The details of magazine.
        image:
          type: string
          description: Url of the image of magazine.
        language:
          type: string
          description: Language of magazine.
        price:
          type: number 
          description: The price of magazine.
        featured:
          type: boolean
          description: flag.
        category:
          type: string
          description: The category of magazine which it belongs to.
        reviews:
          $ref: "#/components/schemas/Reviews"
          description: All reviews of the magazine.
        
      example:
        name: Business world
        image: assets/images/im1.jpg
        language: English
        price: 367
        featured: true
        description: BW Businessworld is an Indian business magazine. The magazine was published by ABP Group, whose most prominent publications are The Telegraph, Anandabazar Patrika, Sananda, Anandamela and others.
        category: business
        reviews: []

    Reviews:
      type: object
      required:
        - rating
          review
          author
      properties:
        id:
          type: integer 
          description: The auto-generated id of the review.
        rating:
          type: number
          description: The rating of the newspaper/magazine.
        review:
          type: string
          description: The review given to the newspaper/magazine.  
        author:
          type: string
          description: The author of the newspaper/magazine. 
      example:
        rating: 4
        review: Nice newspaper with lots of new information 
        author: Saritha
  
    User:
      type: object
      required:
        - username
        - password
        
      properties:
        id:
          type: integer 
          description: The auto-generated id of the user.
        username:
          type: string
          description: Username of user.
        password:
          type: string
          description: Password of user.
        admin:
          type: boolean
          description: True if user is also an admin.
                
      example:
        username: Bhanu
        password : xxx
        admin : True
        
      
        


